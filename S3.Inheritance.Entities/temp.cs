//using System;
//using System.Collections.Generic;
//using System.Text;

//namespace S3.Inheritance.Entities
//{
//    public class Account : Entity
//    {
//        #region fields
//        protected decimal balance;
//        protected DateTime created;
//        private string accountNumber;
//        private decimal creaditLimit;
//        private List<Transaction> transactions;

//        #endregion

//        #region properties

//        /// <summary>
//        /// Get or set the Balance.
//        /// </summary>
//        /// <exception cref="ArgumentException"/>
//        public decimal Balance
//        {
//            get
//            {
//                return balance;
//            }

//            set
//            {
//                var validateResult = ValidateBalance(value);
//                if (!validateResult.isValid)
//                {
//                    throw new ArgumentException(validateResult.errorMessage);
//                }
//                else
//                {
//                    balance = value;
//                }

//            }
//        }

//        /// <summary>
//        /// Get or set the Created.
//        /// </summary>
//        public DateTime Created { get => created; set => created = value; }
//        protected string AccountNumber { get => accountNumber; set => accountNumber = value; }
//        protected decimal CreaditLimit { get => creaditLimit; set => creaditLimit = value; }
//        protected List<Transaction> Transactions { get => transactions; set => transactions = value; }
//        #endregion

//        #region constructor
//        /// <summary>
//        /// Initalizes a new instance of this class. Use for existing records.
//        /// </summary>
//        /// <param name="id">The persistence if generated by the database</param>
//        /// <param name="balance">The balance of the account.</param>
//        /// <param name="created">The date when the account was created</param>
//        public Account(int id, string accountNumber, decimal balance, DateTime created, decimal creditLimit, List<Transaction> transactions)
//            : base(id)
//        {
//            if (id <= 0)
//            {
//                throw new ArgumentException("Id is 0, if new account use other constructor.");
//            }
//            else
//            {
//                Balance = balance;
//                Created = created;
//            }
//        }

//        /// <summary>
//        /// Initalizes a new instance of this class. Use for new records not yet presisted.
//        /// </summary>
//        /// <param name="initalBalance">The initial balance of the record.</param>
//        public Account(decimal initalBalance)
//        {
//            Balance = initalBalance;
//            Created = DateTime.Today;
//        }

//        /// <summary>
//        /// Empty Constructor.
//        /// </summary>
//        public Account()
//        {

//        }
//        #endregion

//        /// <summary>
//        /// Validate that the balance is within the given interval.
//        /// </summary>
//        /// <param name="balance">the value to be validated</param>
//        /// <returns>A <see cref="(bool, string)"/> tuple, indicating the result of the validation</returns>
//        public static (bool isValid, string errorMessage) ValidateBalance(decimal balance)
//        {
//            if (balance < -999999999 || balance > 999999999)
//            {
//                return (false, "balance is above 999999999 or below -999999999");
//            }
//            else
//            {
//                return (true, "balance is valid");
//            }
//        }

//        /// <summary>
//        /// Used to withdraw money from the account.
//        /// </summary>
//        /// <param name="amount">amount to be withdrawn</param>
//        /// <exception cref="ArgumentException"/>
//        public void Withdraw(decimal amount)
//        {
//            var validateResult = ValidateAmount(amount);
//            if (!validateResult.isValid)
//            {
//                throw new ArgumentException(validateResult.errorMsg);
//            }
//            else
//            {
//                Balance -= amount;
//            }
//        }

//        /// <summary>
//        /// Used to deposit money to the account.
//        /// </summary>
//        /// <param name="amount">The amount to be deposit</param>
//        /// <exception cref="ArgumentException"/>
//        public void Deposit(decimal amount)
//        {
//            var validateResult = ValidateAmount(amount);
//            if (!validateResult.isValid)
//            {
//                throw new ArgumentException(validateResult.errorMsg);
//            }
//            else
//            {
//                Balance += amount;
//            }
//        }

//        /// <summary>
//        /// Validate that the amount is within the given interval.
//        /// </summary>
//        /// <param name="amount">the value to be validated</param>
//        /// <returns>A <see cref="(bool, string)"/> tuple, indicating te result of the validation</returns>
//        public static (bool isValid, string errorMsg) ValidateAmount(decimal amount)
//        {
//            if (amount < 0 || amount > 25000)
//            {
//                return (false, "Amount that is getting deposited is more that 25000 or less than 0");
//            }
//            else
//            {
//                return (true, "Amount is valid");
//            }
//        }

//        /// <summary>
//        /// Returns the number of days since the account was created.
//        /// </summary>
//        /// <returns></returns>
//        public int GetDaysSinceCreation()
//        {
//            return (DateTime.Today - Created.Date).Days;
//        }
//    }
//}
